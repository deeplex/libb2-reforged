
// Copyright 2025 Henrik Steffen Ga√ümann
//
// Distributed under the Boost Software License, Version 1.0.
//         (See accompanying file LICENSE or copy at
//           https://www.boost.org/LICENSE_1_0.txt)

#include "dplx/blake2.hpp"

#include <cstdint>
#include <array>

#include <dplx/blake2.h>
#include "blake2.h"

#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_range_equals.hpp>

TEST_CASE("The BLAKE2S oneshot API should compute a simple hash")
{
    std::array<std::uint8_t, 1> in{};
    std::array<std::uint8_t, DPLX_BLAKE2S_OUTBYTES> out{};

    REQUIRE(!dplx_blake2s(out.data(), out.size(), in.data(), 0, nullptr, 0));

    constexpr std::array<std::uint8_t, DPLX_BLAKE2S_OUTBYTES> expected{
        0x69, 0x21, 0x7a, 0x30, 0x79, 0x90, 0x80, 0x94, 0xe1, 0x11, 0x21, 0xd0, 0x42, 0x35, 0x4a, 0x7c, 0x1f, 0x55, 0xb6, 0x48, 0x2c, 0xa1, 0xa5, 0x1e, 0x1b, 0x25, 0x0d, 0xfd, 0x1e, 0xd0, 0xee, 0xf9
    };
    REQUIRE_THAT(out, Catch::Matchers::RangeEquals(expected));
}

TEST_CASE("The BLAKE2B oneshot API should compute a simple hash")
{
    std::array<std::uint8_t, 1> in{};
    std::array<std::uint8_t, DPLX_BLAKE2B_OUTBYTES> out{};

    REQUIRE(!dplx_blake2b(out.data(), out.size(), in.data(), 0, nullptr, 0));

    constexpr std::array<std::uint8_t, DPLX_BLAKE2B_OUTBYTES> expected{
        0x78, 0x6a, 0x02, 0xf7, 0x42, 0x01, 0x59, 0x03, 0xc6, 0xc6, 0xfd, 0x85, 0x25, 0x52, 0xd2, 0x72, 0x91, 0x2f, 0x47, 0x40, 0xe1, 0x58, 0x47, 0x61, 0x8a, 0x86, 0xe2, 0x17, 0xf7, 0x1f, 0x54, 0x19, 0xd2, 0x5e, 0x10, 0x31, 0xaf, 0xee, 0x58, 0x53, 0x13, 0x89, 0x64, 0x44, 0x93, 0x4e, 0xb0, 0x4b, 0x90, 0x3a, 0x68, 0x5b, 0x14, 0x48, 0xb7, 0x55, 0xd5, 0x6f, 0x70, 0x1a, 0xfe, 0x9b, 0xe2, 0xce
    };
    REQUIRE_THAT(out, Catch::Matchers::RangeEquals(expected));
}
